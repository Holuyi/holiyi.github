<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>什么是微服务，SpringBoot和SpringCloud的关系</title>
      <link href="/2020/07/22/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%EF%BC%8CSpringBoot%E5%92%8CSpringCloud%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
      <url>/2020/07/22/%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1%EF%BC%8CSpringBoot%E5%92%8CSpringCloud%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是微服务"><a href="#什么是微服务" class="headerlink" title="什么是微服务"></a>什么是微服务</h2><p>就目前而言对于微服务业界没有一个统一的,标准的定义.但通常而言,微服务是一种架构模式或者说是一种架构风格,它提倡单一应用程序划分为一组小的服务,每个服务在其独立的自己的进程中,服务之间相互协调,互相配合,为用户提供最终价值.服务之间采用轻量级的通信机制互相沟通(基于Http的Restful API)每个服务都围绕着具体的业务进行构建,并且能够被独立的部署到生产环境,类生产环境进行构建,可以有一个非常轻量级的集中式管理来协调这些服务,可以使用不同的语言来编写服务,也可以使用不同的数据存储.</p><h2 id="微服务与微服务架构"><a href="#微服务与微服务架构" class="headerlink" title="微服务与微服务架构?"></a>微服务与微服务架构?</h2><ul><li>微服务强调的是服务的大小,关注的是点,是具体解决某一个问题/提供落地对象服务的一个服务应用,</li><li>狭义的看,可以看做Eclipse中的一个个微服务工程.</li><li>微服务架构为一种架构模式.他提倡将单一应用程序分成一组小的服务,服务之间互相协调,互相配合,为用户提供最终价值.</li><li>每个服务运行在其独立的进程中,服务于服务间采用轻量级的通信机制互相协作(通常是Http 的Restful API) 每一个服务</li><li>都围绕着具体业务进行构建,并且能够被独立的部署到生产环境,类生产环境中.另外,应当尽量避免统一的,集中式的服务管理机制,</li><li>对具体的一个服务而言,应根据业务上下文,选择合适的语言,工具对其进行构建.</li></ul><h2 id="SpringCloud-是什么"><a href="#SpringCloud-是什么" class="headerlink" title="SpringCloud 是什么?"></a>SpringCloud 是什么?</h2><ul><li>基于SpringBoot提供了一套为微服务(microservices)解决方案,包括服务注册与发现,</li><li>配置中心,全链路监控,服务网关,负载均衡,熔断器等组件,除了基于NetFlix的开营组件做 高度抽象之外,还有一些选型中立了的开源组件.</li><li>分布式微服务架构下的一站式解决方案,是各个微服务架构落地技术的结合体,俗称为微服务全家桶.</li></ul><h2 id="SpringBoot和SpringCloud的关系和区别"><a href="#SpringBoot和SpringCloud的关系和区别" class="headerlink" title="SpringBoot和SpringCloud的关系和区别"></a>SpringBoot和SpringCloud的关系和区别</h2><ol><li>SpringBoot专注于方便的开发单个个体微服务</li><li>SpringCloud是关注于全局的微服务协调治理框架,它将SpringBoot开发的一个个单体微服务整合并管理起来.为各个微服务之间提供配置管理,服务发现,断路器,路由,微代理,事件总线,决策竞选,分布式会话等集成服务.</li><li>SpringBoot可以离开SpringCloud单独使用,而SpringCloud离不开SpringBoot</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> springboot,springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将maven源改为国内阿里云镜像</title>
      <link href="/2020/07/22/%E5%B0%86maven%E6%BA%90%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F/"/>
      <url>/2020/07/22/%E5%B0%86maven%E6%BA%90%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E9%98%BF%E9%87%8C%E4%BA%91%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">interactiveMode</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">usePluginRegistry</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">offline</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM中各层作用及关系</title>
      <link href="/2020/07/22/SSM%E4%B8%AD%E5%90%84%E5%B1%82%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%85%B3%E7%B3%BB/"/>
      <url>/2020/07/22/SSM%E4%B8%AD%E5%90%84%E5%B1%82%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%85%B3%E7%B3%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="持久层：DAO层（mapper层）（属于mybatis模块）"><a href="#持久层：DAO层（mapper层）（属于mybatis模块）" class="headerlink" title="持久层：DAO层（mapper层）（属于mybatis模块）"></a>持久层：DAO层（mapper层）（属于mybatis模块）</h3><ul><li>DAO层：主要负责与数据库进行交互设计，用来处理数据的持久化工作。</li><li>DAO层的设计首先是设计DAO的接口，也就是项目中看到的Dao包。</li><li>然后在Spring的xml配置文件中定义此接口的实现类，就可在其他模块中调用此接口来进行数据业务的处理，而不用关心接口的具体实现类是哪个类，这里往往用到的就是反射机制，DAO层的jdbc.properties数据源配置，以及有关数据库连接的参数都在Spring的配置文件中进行配置。</li><li>有的项目Dao层，写成mapper，当成一个意思理解。</li></ul><h3 id="业务层：Service层（属于spring模块）"><a href="#业务层：Service层（属于spring模块）" class="headerlink" title="业务层：Service层（属于spring模块）"></a>业务层：Service层（属于spring模块）</h3><ul><li><p>Service层：主要负责业务模块的逻辑应用设计。也就是项目中看到的Service包。</p></li><li><p>Service层的设计首先是设计接口，再设计其实现的类。也就是项目中看到的service+impl包。</p></li><li><p>接着再在Spring的xml配置文件中配置其实现的关联。这样我们就可以在应用中调用Service接口来进行业务处理。</p></li><li><p>最后通过调用DAO层已定义的接口，去实现Service具体的实现类。</p></li><li><p>Service层的业务实现，具体要调用到已定义的DAO层的接口。</p></li></ul><h3 id="控制层-表现层：Controller层（Handler层）-（属于springMVC模块）"><a href="#控制层-表现层：Controller层（Handler层）-（属于springMVC模块）" class="headerlink" title="控制层/表现层：Controller层（Handler层） （属于springMVC模块）"></a>控制层/表现层：Controller层（Handler层） （属于springMVC模块）</h3><ul><li>Controller层：主要负责具体的业务模块流程控制，也就是看到的controller包。</li><li>Controller层通过要调用Service层的接口来控制业务流程，控制的配置也同样是在Spring的xml配置文件里面，针对具体的业务流程，会有不同的控制器。</li></ul><h3 id="View层-（属于springMVC模块）"><a href="#View层-（属于springMVC模块）" class="headerlink" title="View层 （属于springMVC模块）"></a>View层 （属于springMVC模块）</h3><ul><li>负责前台jsp页面的展示，此层需要与Controller层结合起来开发。</li><li>Jsp发送请求，controller接收请求，处理，返回，jsp回显数据。</li></ul><h3 id="各层之间的联系"><a href="#各层之间的联系" class="headerlink" title="各层之间的联系"></a>各层之间的联系</h3><ul><li>DAO层，Service层这两个层次可以单独开发，互相的耦合度很低。</li><li>Controller，View层耦合度比较高，因而要结合在一起开发。也可以听当做两层来开发，这样，在层与层之前我们只需要知道接口的定义，调用接口即可完成所需要的逻辑单元应用，项目会显得清晰简单。</li><li>值得注意的是，Service逻辑层设计：Service层是建立在DAO层之上的，在Controller层之下。因而Service层应该既调用DAO层的接口，又提供接口给Controller层的类来进行调用，它处于一个中间层的位置。每个模型都有一个Service接口，每个接口分别封装各自的业务处理方法。</li></ul><h3 id="SSM框架实现一个web程序主要使用到如下三个技术："><a href="#SSM框架实现一个web程序主要使用到如下三个技术：" class="headerlink" title="SSM框架实现一个web程序主要使用到如下三个技术："></a>SSM框架实现一个web程序主要使用到如下三个技术：</h3><ul><li>Spring：用到注解和自动装配，就是Spring的两个精髓IOC(反向控制)和 AOP(面向切面编程)。</li><li>SpringMVC：用到了MVC模型，将流程控制代码放到Controller层处理，将业务逻辑代码放到Service层处理。</li><li>Mybatis：用到了与数据库打交道的层面，dao（mapper）层，放在所有的逻辑之后，处理与数据库的CRUD相关的操作。</li></ul><h3 id="开发项目的时候，需要完成一个功能模块"><a href="#开发项目的时候，需要完成一个功能模块" class="headerlink" title="开发项目的时候，需要完成一个功能模块"></a>开发项目的时候，需要完成一个功能模块</h3><ul><li>先写实体类entity，定义对象的属性，（可以参照数据库中表的字段来设置，数据库的设计应该在所有编码开始之前）。</li><li>写Mapper.xml（Mybatis），其中定义功能，对应要对数据库进行的那些操作，比如 insert、selectAll、selectByKey、delete、update等。</li><li>写Mapper.java/Dao.java，将Mapper.xml中的操作按照id映射成Java函数。实际上就是Dao接口，二者选一即可。</li><li>写Service.java，为控制层提供服务，接受控制层的参数，完成相应的功能，并返回给控制层。</li><li>写Controller.java，连接页面请求和服务层，获取页面请求的参数，通过自动装配，映射不同的URL到相应的处理函数，并获取参数，对参数进行处理，之后传给服务层。</li><li>写JSP页面调用，请求哪些参数，需要获取什么数据。</li></ul><h3 id="面向对象——三层架构（表现层、业务层、持久层）"><a href="#面向对象——三层架构（表现层、业务层、持久层）" class="headerlink" title="面向对象——三层架构（表现层、业务层、持久层）"></a>面向对象——三层架构（表现层、业务层、持久层）</h3><p>三层架构：即表现层、业务层、持久层。</p><ul><li>持久层：采用DAO模式，建立实体类和数据库表映射（ORM映射）。也就是哪个类对应哪个表，哪个属性对应哪个列。持久层的目的就是，完成对象数据和关系数据的转换。</li><li>业务层：采用事务脚本模式。将一个业务中所有的操作封装成一个方法，同时保证方法中所有的数据库更新操作，即保证同时成功或同时失败。避免部分成功部分失败引起的数据混乱操作。</li><li>表现层：采用MVC模式。<br>M称为模型，也就是实体类。用于数据的封装和数据的传输。<br>V为视图，也就是GUI组件，用于数据的展示。<br>C为控制，也就是事件，用于流程的控制</li><li>业务层接口的设计原则：一个实体类一个接口，一次提交一个业务方法。业务方法的参数自表现层。</li><li>持久层接口的设计原则：一个实体类一个接口，一次数据库操作一个持久方法。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> sring,springmvc,mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础学习</title>
      <link href="/2020/07/22/Redis%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/07/22/Redis%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis基础学习"><a href="#Redis基础学习" class="headerlink" title="Redis基础学习"></a>Redis基础学习</h3><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><ol><li><h6 id="概念-Redis是一款高性能的NoSQL系列的非关系型数据库"><a href="#概念-Redis是一款高性能的NoSQL系列的非关系型数据库" class="headerlink" title="概念: Redis是一款高性能的NoSQL系列的非关系型数据库"></a>概念: Redis是一款高性能的NoSQL系列的非关系型数据库</h6></li><li><h6 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作:"></a>命令操作:</h6><ol><li><p>Redis的数据结构:</p><ul><li><p>Redis存储的是: key-value格式的数据，其中key都是字符串，value有5种不同的数据结构</p></li><li><p>value的数据结构:</p><ol><li><p>字符串类型: String</p></li><li><p>哈希类型: hash(Map类型)</p></li><li><p>列表类型: list(Linkedlist)</p></li><li><p>集合类型: set</p></li><li><p>有序列表类型: sortedset</p></li></ol></li></ul></li><li><p>字符串类型 string</p><ol><li><p>存储: set key value</p></li><li><p>获取: get key</p></li><li><p>删除: del key</p><a id="more"></a></li></ol></li><li><p>哈希类型 hash</p><ol><li><p>存储: hset key field value</p></li><li><p>获取: hget key field</p></li><li><p>删除: hdel key field</p></li><li><p>获取hash中的所有键和值: hgetall key</p></li></ol></li><li><p>列表类型 list</p><ol><li><p>存储:</p><ul><li><p>lpush key value: 从左添加</p></li><li><p>rpush key value: 从右添加</p></li></ul></li><li><p>获取:</p><ul><li>lrange key start end: 范围获取(0 -1代表获取全部)</li></ul></li><li><p>删除:</p><ul><li><p>lpop key: 删除列表最左边的元素，并返回</p></li><li><p>rpop key: 删除列表最右边的元素，并返回</p></li></ul></li></ol></li><li><p>集合类型 set: 不允许重复元素(且无序)</p><ol><li><p>存储: sadd key value value1 value2 ….</p></li><li><p>获取: smembers key: 获取set集合中的所有元素</p></li><li><p>删除: srem key value: 删除set集合中的某个元素</p></li></ol></li><li><p>有序集合类型 sortedset: 不允许有重复元素，不同的是每个元素会有一个double类型的分数(权重)，按照此分数进行排序</p><ol><li><p>存储: zadd key score value</p></li><li><p>获取: zrange key start end</p></li><li><p>删除: zrem key value</p></li></ol></li><li><p>通用命令</p><ol><li><p>keys * : 查询所有的键</p></li><li><p>type key : 获取键对应的value的类型</p></li><li><p>del key: 删除指定的key value</p></li></ol></li></ol></li><li><h6 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h6><ol><li><p>Redis是一个内存数据库，当Redis服务器或电脑重启，数据会丢失，我们可以将Redis内存中的数据持久化保存到硬盘文件中</p></li><li><p>Redis持久化机制</p><ol><li><p>RDB: 默认方式，不需要进行配置，默认使用</p><ul><li>在一定间隔事件中，检测key的变化情况，然后持久化数据</li></ul><ol><li><p>编辑redis.windows.conf文件</p><ul><li><p>save 900 1(15分钟有一个key变化就持久化)</p></li><li><p>save 300 10</p></li><li><p>save 60 10000</p></li></ul></li><li><p>重新启动redis服务器并指定conf</p><ul><li>cmd启动服务器: redis-server.exe redis.windows.conf</li></ul></li></ol></li><li><p>AOF: 日志记录的方法，可以记录每一条命令的操作，然后持久化操作(不推荐)</p><ul><li>编辑redis.windows.conf</li></ul></li></ol><ul><li>appendonly no(关闭aof) –&gt; appendonly yes<ul><li>appendfsync always: 每一次操作都进行持久化<ul><li>appendfsync everysec: 每隔一秒都进行一次持久化</li></ul></li><li>appendfsync no : 不进行持久化</li></ul></li></ul></li></ol></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 使用（ssh key创建和github使用）</title>
      <link href="/2020/07/18/git-%E4%BD%BF%E7%94%A8%EF%BC%88ssh-key%E5%88%9B%E5%BB%BA%E5%92%8Cgithub%E4%BD%BF%E7%94%A8%EF%BC%89/"/>
      <url>/2020/07/18/git-%E4%BD%BF%E7%94%A8%EF%BC%88ssh-key%E5%88%9B%E5%BB%BA%E5%92%8Cgithub%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="ssh用于验证，https-github-com-需要，https-www-cloudcontrol-com-onboarding-ssh也需要。"><a href="#ssh用于验证，https-github-com-需要，https-www-cloudcontrol-com-onboarding-ssh也需要。" class="headerlink" title="ssh用于验证，https://github.com/ 需要，https://www.cloudcontrol.com/onboarding/ssh也需要。"></a>ssh用于验证，<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/</a> 需要，<a href="https://www.cloudcontrol.com/onboarding/ssh也需要。" target="_blank" rel="noopener">https://www.cloudcontrol.com/onboarding/ssh也需要。</a></h4><h4 id="git使用记录"><a href="#git使用记录" class="headerlink" title="git使用记录"></a>git使用记录</h4><p>git是分布式的代码管理工具，远程的代码管理是基于ssh的，所以要使用远程的git则需要ssh的配置。</p><p>github的ssh配置如下：</p><h5 id="一-、设置git的user-name和email："><a href="#一-、设置git的user-name和email：" class="headerlink" title="一 、设置git的user name和email："></a>一 、设置git的user name和email：</h5><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name "xuhaiyan"</span><br><span class="line">$ git config --global user.email "haiyan.xu.vip@gmail.com"</span><br></pre></td></tr></tbody></table></figure><h5 id="二、生成SSH密钥过程："><a href="#二、生成SSH密钥过程：" class="headerlink" title="二、生成SSH密钥过程："></a>二、生成SSH密钥过程：</h5><p>1.查看是否已经有了ssh密钥：cd ~/.ssh<br>如果没有密钥则不会有此文件夹，有则备份删除<br>2.生存密钥：</p><blockquote><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C “haiyan.xu.vip@gmail.com”</span><br><span class="line">按3个回车，密码为空。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Your identification has been saved in /home/tekkub/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/tekkub/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">………………</span><br></pre></td></tr></tbody></table></figure></blockquote><p>最后得到了两个文件：id_rsa和id_rsa.pub</p><p>3.添加密钥到ssh：ssh-add 文件名</p><p>需要之前输入密码。<br>4.在github上添加ssh密钥，这要添加的是“id_rsa.pub”里面的公钥。</p><p>打开<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/</a> ，登陆xuhaiyan825，然后添加ssh。</p><p>5.测试：ssh <a href="mailto:git@github.com">git@github.com</a></p><blockquote><p>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)? yes<br>Warning: Permanently added ‘github.com,207.97.227.239′ (RSA) to the list of known hosts.<br>ERROR: Hi tekkub! You’ve successfully authenticated, but GitHub does not provide shell access<br>Connection to github.com closed.</p></blockquote><h5 id="三、-开始使用github"><a href="#三、-开始使用github" class="headerlink" title="三、 开始使用github"></a>三、 开始使用github</h5><p>1.获取源码：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone git@github.com:billyanyteen/github-services.git</span><br></pre></td></tr></tbody></table></figure><p>2.这样你的机器上就有一个repo了。<br>3.git于svn所不同的是git是分布式的，没有服务器概念。所有的人的机器上都有一个repo，每次提交都是给自己机器的repo<br>仓库初始化：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></tbody></table></figure><p>生成快照并存入项目索引：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></tbody></table></figure><p>文件,还有git rm,git mv等等…<br>项目索引提交：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></tbody></table></figure><p>4.协作编程：<br>将本地repo于远程的origin的repo合并，<br>推送本地更新到远程：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></tbody></table></figure><p>更新远程更新到本地：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></tbody></table></figure><p>补充：<br>添加远端repo：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add upstream git://github.com/pjhyett/github-services.git</span><br></pre></td></tr></tbody></table></figure><p>重命名远端repo：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git://github.com/pjhyett/github-services.git为“upstream”</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo+github搭建一个属于自己的服务器</title>
      <link href="/2020/06/01/%E4%BD%BF%E7%94%A8Hexo+github%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2020/06/01/%E4%BD%BF%E7%94%A8Hexo+github%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h4><p>node -v #查看node版本</p><p>npm -v #查看npm版本</p><p>npm install -g cnpm –registry=<a href="http://registry.npm.taobao.org" target="_blank" rel="noopener">http://registry.npm.taobao.org</a> #安装淘宝的cnpm 管理器</p><p>cnpm -v #查看cnpm版本</p><p>cnpm install -g hexo-cli #安装hexo框架</p><p>hexo -v #查看hexo版本</p><p>mkdir blog #创建blog目录</p><p>cd blog #进入blog目录</p><p>sudo hexo init #生成博客 初始化博客</p><p>hexo s #启动本地博客服务</p><p><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> #本地访问地址</p><p>hexo n “我的第一篇文章” #创建新的文章</p><p>返回blog目录</p><p>hexo clean #清理</p><p>hexo g #生成</p><p>Github创建一个新的仓库 YourGithubName.github.io</p><p>cnpm install –save hexo-deployer-git #在blog目录下安装git部署插件</p><h4 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h4><p>Deployment</p><p>Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/docs/deployment.html</a></p><p>deploy:</p><p>type: git</p><p>repo: <a href="https://github.com/YourGithubName/YourGithubName.github.io.git" target="_blank" rel="noopener">https://github.com/YourGithubName/YourGithubName.github.io.git</a></p><p>branch: master</p><p>hexo d #部署到Github仓库里</p><p><a href="https://YourGithubName.github.io/" target="_blank" rel="noopener">https://YourGithubName.github.io/</a> #访问这个地址可以查看博客</p><p>git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia #下载yilia主题到本地</p><p>#修改hexo根目录下的 _config.yml 文件 ： theme: yilia</p><p>hexo c #清理一下</p><p>hexo g #生成</p><p>hexo d #部署到远程Github仓库</p><p>视频链接：<a href="https://www.bilibili.com/video/BV1Yb411a7ty?t=1486" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Yb411a7ty?t=1486</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> hexo,github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello word</title>
      <link href="/2020/06/01/hello%20word/"/>
      <url>/2020/06/01/hello%20word/</url>
      
        <content type="html"><![CDATA[<p>记录第一条博客</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
